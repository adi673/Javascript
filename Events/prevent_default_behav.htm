<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>Random color example — event handler attribute</title>
  </head>
  <body style="background-color: #212121; color: aliceblue;">
    <form>
        <div>
          <label for="fname">First name: </label>
          <input id="fname" type="text" />
        </div>
        <div>
          <label for="lname">Last name: </label>
          <input id="lname" type="text" />
        </div>
        <div>
          <input id="submit" type="submit" />
        </div>
    </form>
    <p></p>
      
    <script>
        const form = document.querySelector("form");
        const lname = document.getElementById("lname");
        const fname = document.getElementById("fname");
        
        const para = document.querySelector("p");
        form.addEventListener("submit", (e) => {
            if (fname.value === "" || lname.value === "") {
                e.preventDefault();
                para.textContent = "You need to fill in both names!";
                return
            }
            para.textContent = "Submitted successfully!";
        });
    </script>
  </body>
</html>



<!-- use of prevent default behaviour -->
<!-- Sometimes, you'll come across a situation where you want to prevent an event from doing what it does by default. The most common example is that of a web form, for example, a custom registration form. When you fill in the details and click the submit button, the natural behavior is for the data to be submitted to a specified page on the server for processing, and the browser to be redirected to a "success message" page of some kind (or the same page, if another is not specified). -->